<text>
wx.login(OBJECT)
调用接口获取登录凭证（code）进而换取用户登录态信息，包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）。
用户数据的加解密通讯需要依赖会话密钥完成。
success	Function	否	接口调用成功的回调函数
fail	Function	否	接口调用失败的回调函数
complete	Function	否	接口调用结束的回调函数（调用成功、失败都会执行)
success:
errMsg	String	调用结果
code	String	用户允许登录后，回调内容会带上 code（有效期五分钟），
开发者需要将 code 发送到开发者服务器后台，使用code 换取 session_key api，将 code 换成 openid 和 session_key

//app.js
App({
  onLaunch: function() {
    wx.login({
      success: function(res) {
        if (res.code) {
          //发起网络请求
          wx.request({
            url: 'https://test.com/onLogin',
            data: {
              code: res.code
            }
          })
        } else {
          console.log('获取用户登录态失败！' + res.errMsg)
        }
      }
    });
  }
})

code 换取 session_key
​这是一个 HTTP 接口，开发者服务器使用登录凭证 code 获取 session_key 和 openid。其中 session_key 是对用户数据进行加密签名的密钥。
为了自身应用安全，session_key 不应该在网络上传输。

https://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code

appid	是	小程序唯一标识
secret	是	小程序的 app secret
js_code	是	登录时获取的 code
grant_type	是	填写为 authorization_code
openid	用户唯一标识
session_key	会话密钥
expires_in	会话有效期, 以秒为单位, 例如2592000代表会话有效期为30天
//正常返回的JSON数据包
{
      "openid": "OPENID",
      "session_key": "SESSIONKEY"
      "expires_in": 2592000
}
//错误时返回JSON数据包(示例为Code无效)
{
    "errcode": 40029,
    "errmsg": "invalid code"
}



登录态维护
通过 wx.login() 获取到用户登录态之后，需要维护登录态。
开发者要注意不应该直接把 session_key、openid 等字段作为用户的标识或者 session 的标识，
而应该自己派发一个 session 登录态（请参考登录时序图）。
对于开发者自己生成的 session，应该保证其安全性且不应该设置较长的过期时间。
session 派发到小程序客户端之后，可将其存储在 storage ，用于后续通信使用。

wx.checkSession(OBJECT)
检查登陆态是否过期
success	Function	否	接口调用成功的回调函数，登陆态未过期
fail	Function	否	接口调用失败的回调函数，登陆态已过期
complete	Function	否	接口调用结束的回调函数（调用成功、失败都会执行）
wx.checkSession({
  success: function(){
    //登录态未过期
  },
  fail: function(){
    //登录态过期
    wx.login()
  }
})

bug: iOS/Android 6.3.30，在 App.onLaunch 调用 wx.login 会出现异常；
</text>