// 引用 import include
import 有自己的作用域，只是将目标文件的的template引入到该文件，
目标文件自身import 的的template没有被引入

include 可以将目标文件除了 template 的整个代码引入，相当于拷贝到 include的位置。
<import src="../item/item"/>
<template is="item" data="{{text: 'forbat'}}">
</template>


<view class="br"></view>

// Event
// 事件对象可以携带额外信息，如 id, dataset, touches。
<view id="tapTest" data-hi="Wechat"  bindtouchstart="touchstart"
    bindtouchmove="touchmove" bindtouchcancel="touchcancel" bindtouchend="touchend"
    bindtap="tap" bindlongtap="longtap">Click me!</view>
<view class="br"></view>
<text>catch 会组织向上冒泡， bind不会</text>
<text>
BaseEvent 基础事件对象属性列表：
type	String	事件类型
timeStamp	Integer	事件生成时的时间戳
target	Object	触发事件的组件的一些属性值集合
currentTarget	Object	当前组件的一些属性值集合
</text>
<text>
CustomEvent 自定义事件对象属性列表（继承 BaseEvent）：
detail	Object	额外的信息
</text>


// 模板
<template name="msgItem">
    <view>
        <text>{{index}}: {{msg}}</text>
        <text>Time: {{time}}</text>
    </view>
</template>

<template is="msgItem" data="{{...item}}"></template>
// is 属性可以使用 Mustache 语法，来动态决定具体需要渲染哪个模板：
<template name="odd">
    <view>odd</view>
</template>
<template name="even">
    <view>even</view>
</template>
<block wx:for="{{[1,2,3,4,5]}}" wx:key="a">
    <template is="{{item % 2 == 0? 'even': 'odd'}}"></template>
</block>
// 模板拥有自己的作用域，只能用data传入



<view class="br"></view>
<view>{{message}}</view>

<block>

<switch wx:for="{{objectArray}}" wx:key="unique" style="display:block">{{item.id}}</switch>
<button bindtap="switch">Switch</button>
<button bindtap="addToFront">Add To The Front</button>

<switch wx:for="{{numberArray}}" wx:key="*this" style="display:block">{{item}}</switch>
<button bindtap="addNumberToFront">Add to the front</button>

</block>

<view class="br"></view>

// 列表渲染
<view wx:for="{{list}}" wx:key="*this">{{item}}</view>

// 条件渲染
<view wx:if="{{view == 'view'}}">View</view>
<view wx:elif="{{ view=='index'}}">not-view</view>
<view wx:else>isView</view>

// 模板
<template name="staffName">
    <view>
        FirstName: {{firstName}}, LastName: {{lastName}}
    </view>
</template>

<template is="staffName" data="{{...staffA}}"></template>
<template is="staffName" data="{{...staffB}}"></template>
<template is="staffName" data="{{...staffC}}"></template>

<view bindtap="add">{{count}}</view>
<view class="br"></view>

// 数据绑定
// 组件属性，需要在引号内
<view id="item-{{id}}">{{id}}</view>
// 控制属性(需要在双引号之内)
<view if="{{id}}">{{id}}<view>
// 关键字(需要在双引号之内)
<checkbox checked="{{false}}" hidden="{{flag? true: false}}"></checkbox>
// {{}} 可以三元运算，算数运算，逻辑判断，字符串运算，数据路径运算
<view>{{(3+5>4) + ' hello'}}</view>
<view>{{name[0].lastName}}<view>

<template name="obj"> <view> {{b}} </view></template>   
<template is="obj" data="{{...obj1, ...obj2, e: 5}}"></template>

<view class="br"></view>

<view wx:if="{{message}}">{{message}}</view>
<block wx:if="{{message}}">
    <view>{{message}}</view><view>多个需要if控制，可以包裹在block内</view>
    <view>if 与 hide 的区别在于  一个有渲染 一个只是显示隐藏</view>
</block>

<view class="br"></view>

// 默认是 item, index 可以用wx:for-item和 wx:for-index修改
<view wx:for="{{name}}" wx:for-item="itemObj" wx:key="*this">
{{index}}: {{itemObj.lastName}}
</view>
<view wx:for="{{[1,2,3,4,5,6,7,8,9]}}" wx:for-item="i" wx:key="*this">
    <view wx:for="{{[1,2,3,4,5,6,7,8,9]}}" wx:for-item="j" wx:key="*this">
        <view wx:if="{{i <= j}}">
            {{i}} * {{j}} = {{i * j}}
        </view>
    </view>
</view>

<block wx:for="{{[1, 2, 3]}}" wx:key="*this">
  <view> {{index}}: </view>
  <view> {{item}} </view>
</block>




<view class="br"></view>

